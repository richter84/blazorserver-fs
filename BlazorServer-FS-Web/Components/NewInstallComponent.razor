@page "/Customer/{CustomerId:int}/NewInstall"
@page "/Customer/{CustomerId:int}/NewInstall/{NewInstallId:int}"

@inject ICustomerService CustomerService
@inject INewInstallService<NewInstall> NewInstallService
@inject IDoorService DoorService
@inject IInvoiceService InvoiceService

<h3>Job</h3>

@if(NewInstall == null)
{
    <p><em>Loading...</em></p>
}
else{
<div class="col-sm-10 col-md-8">

    <div class="state-map-container">
        @foreach (var type in Enum.GetValues(typeof(JobStatus)))
        {
            string IsComplete = string.Empty;
            DateTimeOffset? Date = null;
            string Time = string.Empty;
            bool IsLastStatus = false;
            JobStatus jobStatus = (JobStatus)Enum.ToObject(typeof(JobStatus), type);

            var history = NewInstall.History.Where(h => h.Status == jobStatus);

            foreach (var item in history)
            {
                IsComplete = "complete";
                Date = item.Entry;
                Time = item.Entry.ToString("h:mmtt").ToLower();
            }
            if (jobStatus == JobStatus.Paid)
            {
                IsLastStatus = true;
            }
            <StatusComponent IsComplete="@IsComplete" Date="@Date" Time="@Time" State="@type.ToString()" IsLastStatus="@IsLastStatus"></StatusComponent>
        }
    </div>
    <section>
        <fieldset>
            <legend>
                Customer
            </legend>
            <div class="row">
                <div class="col-sm-12">
                    <label for="customername"><strong>Name</strong></label><br />
                    <label id="customername">@NewInstall.Customer?.Name</label>
                </div>
                <div class="col-sm-6">
                    <label for="customeremailaddress"><strong>Email Address</strong></label><br />
                    <label id="customeremailaddress">@NewInstall.Customer?.EmailAddress</label>
                </div>
                <div class="col-sm-6">
                    <label for="customerphonenumber"><strong>Phone Number</strong></label><br />
                    <label id="customerphonenumber">@NewInstall.Customer?.PhoneNumber</label>
                </div>
            </div>
        </fieldset>
    </section>
    <EditForm Model="@NewInstall" OnValidSubmit="@HandleSave">
        <DataAnnotationsValidator />
        <section>
            <fieldset>
                <legend>
                    Door
                </legend>
                <div class="form-group">
                    <select @onchange="HandleDoorTypeChange" class="btn btn-secondary btn-mobile-maxwidth">
                        <option value=" ">Select Door Type ...</option>
                        @foreach (var type in Enum.GetValues(typeof(DoorType)))
                        {
                            var isSelected = type.ToString() == NewInstall.Door?.DoorType.ToString();
                            <option value="@type" selected="@isSelected">
                                @EnumHelper.GetDisplayName((DoorType)Enum.Parse(typeof(DoorType), type.ToString()))
                            </option>
                        }
                    </select>
                </div>
            </fieldset>

            <RollerShutterComponent IsDisabled="@IsDoorDisabled" IsVisible="@IsRollerShutterVisible" RollerShutter="@RollerShutter"></RollerShutterComponent>
            <SectionalComponent IsDisabled="@IsDoorDisabled" IsVisible="@IsSectionalVisible" Sectional="@Sectional"></SectionalComponent>
            <PedestrianComponent IsDisabled="@IsDoorDisabled" IsVisible="@IsPedestrianVisible" Pedestrian="@Pedestrian"></PedestrianComponent>
            <GatesComponent IsDisabled="@IsDoorDisabled" IsVisible="@IsGatesVisible" Gates="@Gates"></GatesComponent>
            <BarsGrillesComponent IsDisabled="@IsDoorDisabled" IsVisible="@IsBarsGrillesVisible" BarsGrilles="@BarsGrilles"></BarsGrillesComponent>
        </section>
        <HandoverComponent IsVisible="@IsHandoverVisible" Handover="@NewInstall.Handover" IsDisabled="@IsHandoverDisabled"></HandoverComponent>
        
        <CascadingValue Name="InvoicesToBeSent" Value="@InvoicesToBeSent">
            <InvoiceComponent IsVisible="@IsInvoiceVisible" NewInstall="@NewInstall" EnableSendInvoice="@EnableSendInvoice"></InvoiceComponent>
        </CascadingValue>
       
        <div class="button-group">
            <input type="submit" class="btn btn-secondary btn-lg btn-block @IsSaveVisible" value="Save" />
            <div class="@IsSaveUpdated updated text-success alert-success"><span>Updated</span> <span class="oi oi-circle-check"></span></div>
        </div>

        <ValidationSummary />
    </EditForm>
    <div class="button-group">
        @if (NewInstall.Status < JobStatus.Approved)
        {
            <hr class="hr-text @IsUpdateStatusVisible" data-content="Or">
        }
        <button @attributes="InputAttributes" class="btn btn-primary btn-lg btn-block @IsUpdateStatusVisible" @onclick="HandleUpdateStatus">
            @ButtonText
        </button>
        <div class="@IsStatusUpdated updated text-success alert-success"><span>Updated to @NewInstall.Status</span> <span class="oi oi-circle-check"></span></div>
    </div>
        <br /><br />
    </div>
    }

    @code {

        [Parameter]
        public int CustomerId { get; set; }
        [Parameter]
        public int NewInstallId { get; set; }

        private List<Invoice> InvoicesToBeSent { get; set; } = new List<Invoice>();

        private NewInstall NewInstall { get; set; }
        private RollerShutterDoor RollerShutter { get; set; } = new RollerShutterDoor();
        private SectionalDoor Sectional { get; set; } = new SectionalDoor();
        private PedestrianDoor Pedestrian { get; set; } = new PedestrianDoor();
        private GatesDoor Gates { get; set; } = new GatesDoor();
        private BarsGrillesDoor BarsGrilles { get; set; } = new BarsGrillesDoor();

        private Dictionary<string, object> InputAttributes { get; set; } = new Dictionary<string, object>();

        private Invoice Invoice { get; set; } = new Invoice();

        private string IsSaveVisible = "d-none";
        private string IsSaveUpdated = "d-none";
        private string IsStatusUpdated = "d-none";
        private string IsUpdateStatusVisible = "d-none";
        private string IsUpdateStatusDisabled = "disabled";
        private bool IsInvoiceVisible = false;

        private string ButtonText = "Save";
        private bool IsRollerShutterVisible, IsSectionalVisible, IsPedestrianVisible, IsGatesVisible, IsBarsGrillesVisible, IsHandoverVisible = false;
        private string IsDoorDisabled, IsHandoverDisabled;

        protected override async Task OnInitializedAsync()
        {
            await Bind(NewInstallId);
        }

        private async Task Bind(int newInstallId)
        {
            NewInstall = await NewInstallService.GetNewInstall(newInstallId);
            if (NewInstall != null)
            {
                switch (NewInstall.Door.DoorType)
                {
                    case DoorType.RollerShutter:
                        RollerShutter = (RollerShutterDoor)NewInstall.Door;
                        break;
                    case DoorType.Sectional:
                        Sectional = (SectionalDoor)NewInstall.Door;
                        break;
                    case DoorType.Pedestrian:
                        Pedestrian = (PedestrianDoor)NewInstall.Door;
                        break;
                    case DoorType.Gates:
                        Gates = (GatesDoor)NewInstall.Door;
                        break;
                    case DoorType.BarsGrilles:
                        BarsGrilles = (BarsGrillesDoor)NewInstall.Door;
                        break;
                    default:
                        break;
                }

                BindDoor(NewInstall.Door.DoorType);
                //await BindInvoices(CustomerId);
                RenderStatus();
            }
            else
            {
                NewInstall = new NewInstall() { Customer = await CustomerService.GetCustomer(CustomerId) };
            }
        }


        private void BindDoor(DoorType door)
        {
            IsRollerShutterVisible = IsSectionalVisible = IsPedestrianVisible = IsGatesVisible = IsBarsGrillesVisible = IsHandoverVisible = false;
            switch (door)
            {
                case DoorType.RollerShutter:
                    IsRollerShutterVisible = true;
                    NewInstall.Door = RollerShutter;
                    break;
                case DoorType.Sectional:
                    IsSectionalVisible = true;
                    NewInstall.Door = Sectional;
                    break;
                case DoorType.Pedestrian:
                    IsPedestrianVisible = true;
                    NewInstall.Door = Pedestrian;
                    break;
                case DoorType.Gates:
                    IsGatesVisible = true;
                    NewInstall.Door = Gates;
                    break;
                case DoorType.BarsGrilles:
                    IsBarsGrillesVisible = true;
                    NewInstall.Door = BarsGrilles;
                    break;
                default:
                    IsHandoverVisible = false;
                    IsSaveVisible = "d-none";
                    NewInstall.Door = null;
                    break;
            }

            if (NewInstall.Door != null)
            {
                IsHandoverVisible = true;
                IsSaveVisible = "d-block";
            }
        }


        private async Task ChangeStatus()
        {
            NewInstall.Status++;
            AddHistory();

            if (NewInstall.Status == JobStatus.Invoiced
                && InvoicesToBeSent.Any())
            {
                await PublishToEventGrid(InvoicesToBeSent.Last());
            }
        }

        private void AddHistory()
        {
            var historyStatus = new HistoryStatus() { Status = NewInstall.Status, Entry = DateTimeOffset.Now };
            NewInstall.History.Add(historyStatus);
        }

        private void RenderStatus()
        {
            switch (NewInstall.Status)
            {
                case JobStatus.Pending:
                    ButtonText = "Complete";
                    break;
                case JobStatus.Complete:
                    ButtonText = "Approve";
                    break;
                case JobStatus.Approved:
                    ButtonText = "Send Invoice";
                    IsInvoiceVisible = true;
                    InputAttributes.Add("disabled", "disabled");
                    IsUpdateStatusDisabled = "disabled";
                    break;
                case JobStatus.Invoiced:
                    ButtonText = "Mark as Paid";
                    break;
                case JobStatus.Paid:
                    IsUpdateStatusVisible = "d-none";
                    break;
            }

            IsStatusUpdated = "d-none";
            IsSaveUpdated = "d-none";
            IsUpdateStatusVisible = "d-block";

            if (NewInstall.Status > JobStatus.Complete)
            {
                IsDoorDisabled = "disabled";
                IsHandoverDisabled = "disabled";
                IsSaveVisible = "d-none";
            }
        }

        private void EnableSendInvoice(List<Invoice> invoices)
        {
            if(InvoicesToBeSent.Any())
            {
                InputAttributes.Remove("disabled");
            }
            else
            {
                InputAttributes.Add("disabled", "disabled");
            }
        }

        private async Task PublishToEventGrid(Invoice invoice)
        {
            InvoiceCreatedEvent invoicecreatedEvent = new InvoiceCreatedEvent()
            {
                JobId = NewInstall.Id,
                CustomerId = NewInstall.Customer.Id,
                CustomerName = NewInstall.Customer.Name,
                CustomerEmailAddress = NewInstall.Customer.EmailAddress,
                InvoiceItems = invoice.InvoiceItems,
                SubTotal = invoice.SubTotal,
                VatTotal = invoice.VatTotal,
                SerialNumber = invoice.SerialNumber,
                FileName = invoice.FileName
            };

            await InvoiceService.PublishInvoiceCreatedToEventGrid(invoicecreatedEvent);
        }

        private void HandleDoorTypeChange(ChangeEventArgs e)
        {
            DoorType doorType;
            if (Enum.IsDefined(typeof(DoorType), e.Value))
            {
                doorType = (DoorType)Enum.Parse(typeof(DoorType), e.Value.ToString());
            }
            else
            {
                doorType = (DoorType)Enum.ToObject(typeof(DoorType), 0);
            }

            BindDoor(doorType);
        }



        private async Task HandleSave(EditContext editContext)
        {

            var newInstall = (NewInstall)editContext.Model;
            newInstall.Status = JobStatus.Pending;
            AddHistory();
            await NewInstallService.AddorUpdate(newInstall);
            await Bind(newInstall.Id);
            IsSaveUpdated = "d-block";
        }

        private async Task HandleUpdateStatus()
        {
            await ChangeStatus();
            AddHistory();
            await NewInstallService.AddorUpdate(NewInstall);
            await Bind(NewInstall.Id);
            IsStatusUpdated = "d-block";
        }
    }

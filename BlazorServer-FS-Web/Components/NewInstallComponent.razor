@page "/Customer/{CustomerId:int}/NewInstall"
@page "/Customer/{CustomerId:int}/NewInstall/{NewInstallId:int}"
@inject ICustomerService CustomerService
@inject INewInstallService<NewInstall> NewInstallService
@inject IServiceProvider ServiceProvider
@inject IDoorService DoorService 

<h3>Job</h3>

<div class="col-sm-10 col-md-8">

    <div class="state-map-container">
        <div class="state">
            <div class="state-icon @IsPendingComplete">
                <span class="oi oi-lock-unlocked"></span>
            </div>
            <h3 class="@IsPendingComplete">Pending</h3>
            <p>
                Tue 18 June 2020
                <br />10:03am
            </p>
        </div>
        <div class="state-line @IsJobComplete"></div>
        <div class="state">
            <div class="state-icon @IsJobComplete">
                <span class="oi oi-lock-locked"></span>
            </div>
            <h3 class="@IsJobComplete">Complete</h3>
            <p>
                Tue 18 June 2020
                <br />10:15am
            </p>
        </div>
        <div class="state-line @IsApprovedComplete"></div>
        <div class="state">
            <div class="state-icon @IsApprovedComplete">
                <span class="oi oi-check"></span>
            </div>
            <h3 class="@IsApprovedComplete">Approved</h3>
            <p>
                Thu 20 June 2020
                <br />7:45am
            </p>
        </div>
        <div class="state-line @IsInvoicedComplete"></div>
        <div class="state">
            <div class="state-icon @IsInvoicedComplete">
                <span class="oi oi-document"></span>
            </div>
            <h3 class="@IsInvoicedComplete">Invoiced</h3>
            <p>
                Fri 21 June 2020
                <br />3:21pm
            </p>
        </div>
        <div class="state-line @IsPaidComplete"></div>
        <div class="state">
            <div class="state-icon @IsPaidComplete">
                <span class="oi oi-british-pound"></span>
            </div>
            <h3 class="@IsPaidComplete">Paid</h3>
            <p>
                Awaiting Payment
                <br /><br />
            </p>
        </div>
    </div>

    <div></div><div></div>
    <section>
        <fieldset>
            <legend>
                Customer Detail
            </legend>
            <div class="row">
                <div class="col-sm-12">
                    <label for="customername"><strong>Name</strong></label><br />
                    <label id="customername">@Customer.Name</label>
                </div>
                <div class="col-sm-6">
                    <label for="customeremailaddress"><strong>Email Address</strong></label><br />
                    <label id="customeremailaddress">@Customer.EmailAddress</label>
                </div>
                <div class="col-sm-6">
                    <label for="customerphonenumber"><strong>Phone Number</strong></label><br />
                    <label id="customerphonenumber">@Customer.PhoneNumber</label>
                </div>
            </div>
        </fieldset>
    </section>
    <br /><br />
    <EditForm Model="@NewInstall" OnSubmit="@HandleSave">
        <section>
            <fieldset>
                <legend>
                    Select Door
                </legend>
                <div class="form-group">
                    <select @onchange="HandleDoorTypeChange" class="btn btn-primary btn-mobile-maxwidth">
                        <option value=" ">Select Door Type ...</option>
                        @foreach (var type in Enum.GetValues(typeof(DoorType)))
                        {
                            var isSelected = type.ToString() == DoorType.ToString();
                            <option value="@type" selected="@isSelected">
                                @EnumHelper.GetDisplayName((DoorType)Enum.Parse(typeof(DoorType), type.ToString()))
                            </option>
                        }
                    </select>
                </div>
            </fieldset>

            <div class="@RollerShutterDisplay">
                <RollerShutterComponent RollerShutter="@RollerShutter"></RollerShutterComponent>
            </div>
            <div class="@SectionalDisplay">
                <SectionalComponent Sectional="@Sectional"></SectionalComponent>
            </div>
            <div class="@PedestrianDisplay">
                <PedestrianComponent Pedestrian="@Pedestrian"></PedestrianComponent>
            </div>
            <div class="@GatesDisplay">
                <GatesComponent Gates="@Gates"></GatesComponent>
            </div>
            <div class="@BarsGrillesDisplay">
                <BarsGrillesComponent BarsGrilles="@BarsGrilles"></BarsGrillesComponent>
            </div>
        </section>
        <br /><br />
        <section>
            <fieldset>
                <legend>
                    Handover
                </legend>
                <form>
                    <div class="form-group">
                        <label for="startdate">Start Date</label>
                    </div>
                    <div class="form-group">
                        <label for="enddate">End Date</label>
                    </div>
                </form>
            </fieldset>
        </section>
        <div></div>
        <input type="submit" class="btn btn-primary" value="Save" />
        <button class="btn btn-secondary btn-mobile-maxwidth" @onclick="HandleUpdateState">
            @ButtonText
        </button>
    </EditForm>
    <br /><br />
    <section class="@DisplayInvoiceItems">
        <fieldset>
            <legend>
                Invoice Items
            </legend>
            <form>
            </form>
        </fieldset>
    </section>
</div>

@code {

    [Parameter]
    public int CustomerId { get; set; }
    [Parameter]
    public int NewInstallId { get; set; }

    private Customer Customer { get; set; } = new Customer();
    private NewInstall NewInstall { get; set; } = new NewInstall();

    private RollerShutterDoor RollerShutter { get; set; } = new RollerShutterDoor();
    private SectionalDoor Sectional { get; set; } = new SectionalDoor();
    private PedestrianDoor Pedestrian { get; set; } = new PedestrianDoor();
    private GatesDoor Gates { get; set; } = new GatesDoor();
    private BarsGrillesDoor BarsGrilles { get; set; } = new BarsGrillesDoor();

    public EventCallback<EditContext> OnSave { get; set; }

    private string IsPendingComplete;
    private string IsJobComplete;
    private string IsApprovedComplete;
    private string IsInvoicedComplete;
    private string IsPaidComplete;

    private int stateIndex = 1;
    private JobStatus State;
    private DoorType DoorType;

    private const string IsComplete = "complete";
    private string ButtonText = "Complete Job";
    private string RollerShutterDisplay = "d-none";
    private string SectionalDisplay = "d-none";
    private string PedestrianDisplay = "d-none";
    private string GatesDisplay = "d-none";
    private string BarsGrillesDisplay = "d-none";
    private string DisplayInvoiceItems = "d-none";

    protected override async Task OnInitializedAsync()
    {
        Customer = await CustomerService.GetCustomer(CustomerId);
        var newInstall = await NewInstallService.GetNewInstall(NewInstallId);
        if (newInstall != null)
        {
            NewInstall = newInstall;
            switch (newInstall.Door.DoorType)
            {
                case DoorType.RollerShutter:
                    RollerShutter = (RollerShutterDoor)newInstall.Door; //DoorService.GetRollerShutterDoorById(NewInstall.Door.Id);
                    break;
                case DoorType.Sectional:
                    Sectional = (SectionalDoor)newInstall.Door;
                    break;
                case DoorType.Pedestrian:
                    Pedestrian = (PedestrianDoor)newInstall.Door;
                    break;
                case DoorType.Gates:
                    Gates = (GatesDoor)newInstall.Door;
                    break;
                case DoorType.BarsGrilles:
                    BarsGrilles = (BarsGrillesDoor)newInstall.Door;
                    break;
                default:
                    break;
            }
            DoorType = NewInstall.Door.DoorType;
            ChangeDoor(DoorType);
            HandleUpdateState();
        }
    }

    private void HandleUpdateState()
    {
        State = (JobStatus)Enum.ToObject(typeof(JobStatus), stateIndex++);

        switch (State)
        {
            case JobStatus.Pending:
                IsPendingComplete = IsComplete;
                break;
            case JobStatus.Complete:
                IsJobComplete = IsComplete;
                ButtonText = "Approve Job";
                break;
            case JobStatus.Approved:
                IsApprovedComplete = IsComplete;
                ButtonText = "Send Invoice";
                DisplayInvoiceItems = "d-block";
                break;
            case JobStatus.Invoiced:
                IsInvoicedComplete = IsComplete;
                ButtonText = "Mark as Paid";
                break;
            case JobStatus.Paid:
                IsPaidComplete = IsComplete;
                break;
            default:
                break;

        }
    }

    private void ChangeDoor(DoorType door)
    {
        SectionalDisplay = RollerShutterDisplay = "d-none";
        switch (door)
        {
            case DoorType.RollerShutter:
                RollerShutterDisplay = "d-block";
                NewInstall.Door = RollerShutter;
                break;
            case DoorType.Sectional:
                SectionalDisplay = "d-block";
                NewInstall.Door = Sectional;
                break;
            case DoorType.Pedestrian:
                PedestrianDisplay = "d-block";
                NewInstall.Door = Pedestrian;
                break;
            case DoorType.Gates:
                GatesDisplay = "d-block";
                NewInstall.Door = Gates;
                break;
            case DoorType.BarsGrilles:
                BarsGrillesDisplay = "d-block";
                NewInstall.Door = BarsGrilles;
                break;
        }

        NewInstall.Door.DoorType = door;

    }

    private void HandleDoorTypeChange(ChangeEventArgs e)
    {
        var doorType = (DoorType)Enum.Parse(typeof(DoorType), e.Value.ToString());
        ChangeDoor(doorType);
    }

    public async Task HandleSave(EditContext editContext)
    {
        var newInstall = (NewInstall)editContext.Model;
        newInstall.Status = JobStatus.Pending;

        if (string.IsNullOrEmpty(newInstall.SerialNumber))
        {
            var SerialNumber = $"{newInstall.Customer.Name.ToUpper().Substring(0, 4)}-{DateTime.Now.ToString("yyyy-MM")}-{newInstall.Id.ToString("0000")}";
            newInstall.SerialNumber = SerialNumber;
        }

        await NewInstallService.AddorUpdate(newInstall);
    }
}

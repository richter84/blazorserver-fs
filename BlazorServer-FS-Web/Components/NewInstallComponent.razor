@page "/Customer/{CustomerId:int}/NewInstall"
@page "/Customer/{CustomerId:int}/NewInstall/{NewInstallId:int}"
@inject ICustomerService<Customer> CustomerService
@inject INewInstall<NewInstall> NewInstallService

<h3>Job</h3>

<div class="col-sm-10 col-md-8">

    <div class="state-map-container">
        <div class="state">
            <div class="state-icon @IsPendingComplete">
                <span class="oi oi-lock-unlocked"></span>
            </div>
            <h3 class="@IsPendingComplete">Pending</h3>
            <p>
                Tue 18 June 2020
                <br />10:03am
            </p>
        </div>
        <div class="state-line @IsJobComplete"></div>
        <div class="state">
            <div class="state-icon @IsJobComplete">
                <span class="oi oi-lock-locked"></span>
            </div>
            <h3 class="@IsJobComplete">Complete</h3>
            <p>
                Tue 18 June 2020
                <br />10:15am
            </p>
        </div>
        <div class="state-line @IsApprovedComplete"></div>
        <div class="state">
            <div class="state-icon @IsApprovedComplete">
                <span class="oi oi-check"></span>
            </div>
            <h3 class="@IsApprovedComplete">Approved</h3>
            <p>
                Thu 20 June 2020
                <br />7:45am
            </p>
        </div>
        <div class="state-line @IsInvoicedComplete"></div>
        <div class="state">
            <div class="state-icon @IsInvoicedComplete">
                <span class="oi oi-document"></span>
            </div>
            <h3 class="@IsInvoicedComplete">Invoiced</h3>
            <p>
                Fri 21 June 2020
                <br />3:21pm
            </p>
        </div>
        <div class="state-line @IsPaidComplete"></div>
        <div class="state">
            <div class="state-icon @IsPaidComplete">
                <span class="oi oi-british-pound"></span>
            </div>
            <h3 class="@IsPaidComplete">Paid</h3>
            <p>
                Awaiting Payment
                <br /><br />
            </p>
        </div>
    </div>

    <div></div>
    <button class="btn btn-primary" @onclick="HandleUpdateState">
        Save Job
    </button>
    <button class="btn btn-secondary" @onclick="HandleUpdateState">
        @ButtonText
    </button>
    <div></div><br /><br />
    <section>
        <fieldset>
            <legend>
                Customer Detail
            </legend>
            <div class="row">
                <div class="col-sm-12">
                    @Customer.Name
                </div>
                <div class="col-sm-6">
                    @Customer.EmailAddress
                </div>
                <div class="col-sm-6">
                    @Customer.PhoneNumber
                </div>
            </div>
        </fieldset>
    </section>
    <br /><br />
    <section>
        <fieldset>
            <legend>
                Select Door
            </legend>
            <div class="form-group">
                <select @onchange="HandleDoorTypeChange" class="btn btn-primary">
                    @foreach (var type in Enum.GetValues(typeof(DoorType)))
                    {
                        var isSelected = type.ToString() == DoorType.ToString();
                        <option value="@type" selected="@isSelected">
                            @EnumHelper.GetDisplayName((DoorType)Enum.Parse(typeof(DoorType), type.ToString()))
                        </option>
                    }
                </select>
            </div>
        </fieldset>
        <div class="@Display">
            <RollerShutterComponent OnSave="@HandleSave" RollerShutter="@RollerShutter"></RollerShutterComponent>
        </div>
    </section>
    <br /><br />
    <section>
        <fieldset>
            <legend>
                Handover
            </legend>
            <form>
                <div class="form-group">
                    <label for="startdate">Start Date</label>
                </div>
                <div class="form-group">
                    <label for="enddate">End Date</label>
                </div>
            </form>
        </fieldset>
    </section>
    <br /><br />
    <section class="@DisplayInvoiceItems">
        <fieldset>
            <legend>
                Invoice Items
            </legend>
            <form>
            </form>
        </fieldset>
    </section>

</div>

@code {

    [Parameter]
    public int CustomerId { get; set; }
    [Parameter]
    public int NewInstallId { get; set; }

    public Customer Customer { get; set; } = new Customer() { Address = new List<Address>() };

    public NewInstall NewInstall { get; set; } = new NewInstall();

    public RollerShutter RollerShutter { get; set; } = new RollerShutter() { ElectricOperation = new ElectricOperation() };
    public IDoorType DoorTypezzzzzzzzz { get; set; }


    private string IsPendingComplete;
    private string IsJobComplete;
    private string IsApprovedComplete;
    private string IsInvoicedComplete;
    private string IsPaidComplete;

    private int stateIndex = 1;
    private JobStatus State;

    private const string IsComplete = "complete";

    private string ButtonText = "Complete Job";

    private string Display = "d-none";
    private string DisplayInvoiceItems = "d-none";

    public DoorType DoorType { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Customer = await CustomerService.GetCustomer(CustomerId);
        var newInstall = await NewInstallService.GetNewInstall(NewInstallId);
        if(newInstall != null)
        {
            RollerShutter = (RollerShutter)newInstall.Door;
            DoorType = newInstall.Door.DoorType;
            HandleDoorTypeChange();
            HandleUpdateState();
        }
    }

    private void HandleUpdateState()
    {
        State = (JobStatus)Enum.ToObject(typeof(JobStatus), stateIndex++);

        switch (State)
        {
            case JobStatus.Pending:
                IsPendingComplete = IsComplete;
                break;
            case JobStatus.Complete:
                IsJobComplete = IsComplete;
                ButtonText = "Approve Job";
                break;
            case JobStatus.Approved:
                IsApprovedComplete = IsComplete;
                ButtonText = "Send Invoice";
                DisplayInvoiceItems = "d-block";
                break;
            case JobStatus.Invoiced:
                IsInvoicedComplete = IsComplete;
                ButtonText = "Mark as Paid";
                break;
            case JobStatus.Paid:
                IsPaidComplete = IsComplete;
                break;
            default:
                break;

        }
    }

    void HandleDoorTypeChange()
    {
        Display = "d-block";
    }

    public async Task HandleSave(BlazorServerLibrary.Models.RollerShutter rollerShutter)
    {
        NewInstall.Customer = Customer;
        NewInstall.Door = rollerShutter;
        NewInstall.Status = JobStatus.Pending;

        await NewInstallService.AddorUpdate(NewInstall);
    }
}

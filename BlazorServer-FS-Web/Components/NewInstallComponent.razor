@page "/Customer/{CustomerId:int}/NewInstall"
@page "/Customer/{CustomerId:int}/NewInstall/{NewInstallId:int}"
@inject IWebHostEnvironment WebHostEnvironment
@inject ICustomerService CustomerService
@inject INewInstallService<NewInstall> NewInstallService
@inject IDoorService DoorService
@inject IInvoiceService InvoiceService

<h3>Job</h3>

<div class="col-sm-10 col-md-8">

    <div class="state-map-container">
        <div class="state">
            <div class="state-icon @IsPendingComplete">
                <span class="oi oi-lock-unlocked"></span>
            </div>
            <h3 class="@IsPendingComplete">Pending</h3>
            <p>
                @PendingHistoryDate
                <br />
                @PendingHistoryTime
                <br />
            </p>
        </div>
        <div class="state-line @IsJobComplete"></div>
        <div class="state">
            <div class="state-icon @IsJobComplete">
                <span class="oi oi-lock-locked"></span>
            </div>
            <h3 class="@IsJobComplete">Complete</h3>
            <p>
                @CompletedHistoryDate
                <br />
                @CompletedHistoryTime
                <br />
            </p>
        </div>
        <div class="state-line @IsApprovedComplete"></div>
        <div class="state">
            <div class="state-icon @IsApprovedComplete">
                <span class="oi oi-check"></span>
            </div>
            <h3 class="@IsApprovedComplete">Approved</h3>
            <p>
                @ApprovedHistoryDate
                <br />
                @ApprovedHistoryTime
                <br />
            </p>
        </div>
        <div class="state-line @IsInvoicedComplete"></div>
        <div class="state">
            <div class="state-icon @IsInvoicedComplete">
                <span class="oi oi-document"></span>
            </div>
            <h3 class="@IsInvoicedComplete">Invoiced</h3>
            <p>
                @InvoicedHistoryDate
                <br />
                @InvoicedHistoryTime
                <br />
            </p>
        </div>
        <div class="state-line @IsPaidComplete"></div>
        <div class="state">
            <div class="state-icon @IsPaidComplete">
                <span class="oi oi-british-pound"></span>
            </div>
            <h3 class="@IsPaidComplete">Paid</h3>
            <p>
                @PaidHistoryDate
                <br />
                @PaidHistoryTime
                <br />
            </p>
        </div>
    </div>
    <section>
        <fieldset>
            <legend>
                Customer Detail
            </legend>
            <div class="row">
                <div class="col-sm-12">
                    <label for="customername"><strong>Name</strong></label><br />
                    <label id="customername">@NewInstall.Customer?.Name</label>
                </div>
                <div class="col-sm-6">
                    <label for="customeremailaddress"><strong>Email Address</strong></label><br />
                    <label id="customeremailaddress">@NewInstall.Customer?.EmailAddress</label>
                </div>
                <div class="col-sm-6">
                    <label for="customerphonenumber"><strong>Phone Number</strong></label><br />
                    <label id="customerphonenumber">@NewInstall.Customer?.PhoneNumber</label>
                </div>
            </div>
        </fieldset>
    </section>
    <EditForm Model="@NewInstall" OnValidSubmit="@HandleSave">
        <DataAnnotationsValidator />
        <section>
            <fieldset>
                <legend>
                    Select Door
                </legend>
                <div class="form-group">
                    <select @onchange="HandleDoorTypeChange" class="btn btn-primary btn-mobile-maxwidth">
                        <option value=" ">Select Door Type ...</option>
                        @foreach (var type in Enum.GetValues(typeof(DoorType)))
                        {
                            var isSelected = type.ToString() == DoorType.ToString();
                            <option value="@type" selected="@isSelected">
                                @EnumHelper.GetDisplayName((DoorType)Enum.Parse(typeof(DoorType), type.ToString()))
                            </option>
                        }
                    </select>
                </div>
            </fieldset>

            <div class="@RollerShutterDisplay">
                <RollerShutterComponent RollerShutter="@RollerShutter"></RollerShutterComponent>
            </div>
            <div class="@SectionalDisplay">
                <SectionalComponent Sectional="@Sectional"></SectionalComponent>
            </div>
            <div class="@PedestrianDisplay">
                <PedestrianComponent Pedestrian="@Pedestrian"></PedestrianComponent>
            </div>
            <div class="@GatesDisplay">
                <GatesComponent Gates="@Gates"></GatesComponent>
            </div>
            <div class="@BarsGrillesDisplay">
                <BarsGrillesComponent BarsGrilles="@BarsGrilles"></BarsGrillesComponent>
            </div>
        </section>
        <section>
            <HandoverComponent Handover="@NewInstall.Handover" IsDisabled=""></HandoverComponent>
        </section>
        <section class="@DisplayInvoiceItems">
            <fieldset>
                <legend>
                    Invoices
                </legend>
                <div>
                    <AddInvoiceComponent OnAddInvoice="@HandleAddInvoice"></AddInvoiceComponent>
                </div>
                <div class="invoice-files">
                    <DisplayInvoicesComponent Invoices="@Invoices"></DisplayInvoicesComponent>
                </div>
            </fieldset>
        </section>
        <input type="submit" class="btn btn-primary btn-mobile-maxwidth" value="Save" />
        <button class="btn btn-secondary btn-mobile-maxwidth">
            @ButtonText
        </button>
        <ValidationSummary />
    </EditForm>
</div>

@code {

    [Parameter]
    public int CustomerId { get; set; }
    [Parameter]
    public int NewInstallId { get; set; }

    private NewInstall NewInstall { get; set; } = new NewInstall() { Invoices = new List<Invoice>() };

    public EventCallback<Invoice> OnAddInvoice { get; set; }

    private RollerShutterDoor RollerShutter { get; set; } = new RollerShutterDoor();
    private SectionalDoor Sectional { get; set; } = new SectionalDoor();
    private PedestrianDoor Pedestrian { get; set; } = new PedestrianDoor();
    private GatesDoor Gates { get; set; } = new GatesDoor();
    private BarsGrillesDoor BarsGrilles { get; set; } = new BarsGrillesDoor();

    public EventCallback<EditContext> OnSave { get; set; }
    public Dictionary<string, string> Invoices { get; set; } = new Dictionary<string, string>();

    private Invoice Invoice { get; set; } = new Invoice() { InvoiceItems = new List<InvoiceItem>() };

    private string IsPendingComplete;
    private string IsJobComplete;
    private string IsApprovedComplete;
    private string IsInvoicedComplete;
    private string IsPaidComplete;

    private string PendingHistoryDate = "Awaiting Save";
    private string PendingHistoryTime;
    private string CompletedHistoryDate = "Awaiting Completion";
    private string CompletedHistoryTime;
    private string ApprovedHistoryDate = "Awaiting Approval";
    private string ApprovedHistoryTime;
    private string InvoicedHistoryDate = "Awaiting Invoice";
    private string InvoicedHistoryTime;
    private string PaidHistoryDate = "Awaiting Payment";
    private string PaidHistoryTime;

    private int stateIndex = 1;
    private DoorType DoorType;

    private const string IsComplete = "complete";
    private string ButtonText = "Complete Job";
    private string RollerShutterDisplay = "d-none";
    private string SectionalDisplay = "d-none";
    private string PedestrianDisplay = "d-none";
    private string GatesDisplay = "d-none";
    private string BarsGrillesDisplay = "d-none";
    private string DisplayInvoiceItems = "d-none";

    protected override async Task OnInitializedAsync()
    {
        var newInstallFound = await NewInstallService.GetNewInstall(NewInstallId);
        if (newInstallFound != null)
        {
            NewInstall = newInstallFound;
            switch (NewInstall.Door.DoorType)
            {
                case DoorType.RollerShutter:
                    RollerShutter = (RollerShutterDoor)NewInstall.Door; //DoorService.GetRollerShutterDoorById(NewInstall.Door.Id);
                    break;
                case DoorType.Sectional:
                    Sectional = (SectionalDoor)NewInstall.Door;
                    break;
                case DoorType.Pedestrian:
                    Pedestrian = (PedestrianDoor)NewInstall.Door;
                    break;
                case DoorType.Gates:
                    Gates = (GatesDoor)NewInstall.Door;
                    break;
                case DoorType.BarsGrilles:
                    BarsGrilles = (BarsGrillesDoor)NewInstall.Door;
                    break;
                default:
                    break;
            }
            DoorType = NewInstall.Door.DoorType;
            NewInstall.Invoices = new List<Invoice>();
            ChangeDoor(DoorType);
            //await ChangeStatus();
            await BindInvoicesFromAzureStorage(NewInstall.Customer.Id);
            RenderProcessMap();

        }
        else
        {
            NewInstall.Customer = await CustomerService.GetCustomer(CustomerId);
        }
    }

    private async Task ChangeStatus(bool updateStatus = false)
    {
        if (updateStatus)
        {
            NewInstall.Status++;

            //if (NewInstall.Status == JobStatus.Invoiced)
            //{
            //var filename = await CreateInvoiceInAzureStorage();
            //}


            var historyStatus = new HistoryStatus() { Status = NewInstall.Status, Entry = DateTimeOffset.Now };
            NewInstall.History.Add(historyStatus);
        }

        if (NewInstall.Status != JobStatus.Pending && NewInstall.Status != JobStatus.Complete)
        {
            NewInstall.Door.IsDisabled = "disabled";
        }
    }

    private void RenderProcessMap()
    {
        foreach (var historyStatus in NewInstall.History)
        {
            switch (historyStatus.Status)
            {
                case JobStatus.Pending:
                    IsPendingComplete = IsComplete;
                    PendingHistoryDate = historyStatus.Entry.ToString("ddd dd MMMM yyyy");
                    PendingHistoryTime = historyStatus.Entry.ToString("h:mmtt").ToLower();
                    break;
                case JobStatus.Complete:
                    IsJobComplete = IsComplete;
                    ButtonText = "Approve Job";
                    CompletedHistoryDate = historyStatus.Entry.ToString("ddd dd MMMM yyyy");
                    CompletedHistoryTime = historyStatus.Entry.ToString("h:mmtt").ToLower();
                    break;
                case JobStatus.Approved:
                    IsApprovedComplete = IsComplete;
                    ButtonText = "Send Invoice";
                    DisplayInvoiceItems = "d-block";
                    ApprovedHistoryDate = historyStatus.Entry.ToString("ddd dd MMMM yyyy");
                    ApprovedHistoryTime = historyStatus.Entry.ToString("h:mmtt").ToLower();
                    break;
                case JobStatus.Invoiced:
                    IsInvoicedComplete = IsComplete;
                    ButtonText = "Mark as Paid";
                    InvoicedHistoryDate = historyStatus.Entry.ToString("ddd dd MMMM yyyy");
                    InvoicedHistoryTime = historyStatus.Entry.ToString("h:mmtt").ToLower();
                    break;
                case JobStatus.Paid:
                    IsPaidComplete = IsComplete;
                    PaidHistoryDate = historyStatus.Entry.ToString("ddd dd MMMM yyyy");
                    PaidHistoryTime = historyStatus.Entry.ToString("h:mmtt").ToLower();
                    break;
            }
        }
    }

    private void ChangeDoor(DoorType door)
    {
        SectionalDisplay = RollerShutterDisplay = PedestrianDisplay = GatesDisplay = BarsGrillesDisplay = "d-none";
        switch (door)
        {
            case DoorType.RollerShutter:
                RollerShutterDisplay = "d-block";
                NewInstall.Door = RollerShutter;
                break;
            case DoorType.Sectional:
                SectionalDisplay = "d-block";
                NewInstall.Door = Sectional;
                break;
            case DoorType.Pedestrian:
                PedestrianDisplay = "d-block";
                NewInstall.Door = Pedestrian;
                break;
            case DoorType.Gates:
                GatesDisplay = "d-block";
                NewInstall.Door = Gates;
                break;
            case DoorType.BarsGrilles:
                BarsGrillesDisplay = "d-block";
                NewInstall.Door = BarsGrilles;
                break;
        }

        NewInstall.Door.DoorType = door;
    }

    private void HandleDoorTypeChange(ChangeEventArgs e)
    {
        var doorType = (DoorType)Enum.Parse(typeof(DoorType), e.Value.ToString());
        ChangeDoor(doorType);
    }

    private async Task BindInvoicesFromAzureStorage(int customerId)
    {
        Invoices = await InvoiceService.GetInvoicesFromAzureStorageByCustomerId(CustomerId);
    }

    private async Task<string> CreateInvoiceInAzureStorage(Invoice invoice)
    {
        string invoiceFile = Path.Combine(WebHostEnvironment.WebRootPath, "templates", "invoice.html");
        string html = File.ReadAllText(invoiceFile);
        var filename = $"Invoice-{ Guid.NewGuid() }.pdf";
        await InvoiceService.UploadToAzureStorageAsync(html, filename, NewInstall.Customer.Id);
        return filename;
    }

    private async Task PublishToEventGrid(string filename)
    {
        await InvoiceService.PublishTopicToEventGrid("Rich Campbell", "nncrich1984@gmail.com", filename);
    }

    public async Task HandleSave(EditContext editContext)
    {
        var newInstall = (NewInstall)editContext.Model;
        await ChangeStatus(true);
        await NewInstallService.AddorUpdate(newInstall);
        RenderProcessMap();
    }


    async Task HandleAddInvoice(Invoice invoice)
    {
        try
        {
            var filename = await CreateInvoiceInAzureStorage(invoice);
            invoice.FileName = filename;
            NewInstall.Invoices.Add(Invoice);
            await NewInstallService.AddorUpdate(NewInstall);

        }
        catch(Exception) 
        { 
            throw; 
        }
        finally 
        { 
            await BindInvoicesFromAzureStorage(NewInstall.Customer.Id); 
        }
    }
}

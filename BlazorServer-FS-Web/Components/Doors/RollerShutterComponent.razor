@inherits JobComponentBase
@inject IJSRuntime JSRuntime

@if (IsVisible)
{
    <fieldset class="@IsVisible" disabled="@IsDisabled">
        <legend>Roller Shutter Door Detail</legend>
        <div class="form-group">
            <label for="manufacturer">Manufacturer</label>
            <InputText @bind-Value="RollerShutter.Manufacturer" class="form-control" id="manufacturer"></InputText>
        </div>
        <div class="form-group">
            <label for="issupplied">Supplied Door</label>
            <input type="checkbox" @onchange="HandleSuppliedDoorChange" checked="@RollerShutter.IsSupplied" class="form-control checkbox" id="issupplied" />
        </div>
        <div class="form-group @IsVisibleSupplierOrderNumber">
            <label for="supplierordernumber">Supplier Order Number</label>
            <InputText @bind-Value="RollerShutter.SupplierOrderNumber" class="form-control" id="supplierordernumber"></InputText>
        </div>
        <div class="form-group">
            <label for="sectortype">Sector Type</label>
            <select @onchange="(eventArgs) => { RollerShutter.Sector = (SectorType)HandleSelectChange<SectorType>(eventArgs); }" class="form-control" id="sectortype">
                <option>Select Sector Type ...</option>
                @foreach (var type in Enum.GetValues(typeof(SectorType)))
                {
                    var isSelected = type.ToString() == RollerShutter.Sector.ToString();
                    <option value="@type" selected="@isSelected">@EnumHelper.GetDisplayName((SectorType)Enum.Parse(typeof(SectorType), type.ToString()))</option>
                }
            </select>
        </div>
        <div class="form-group">
            <label for="openingsizeheight">Opening Size Height</label>
            <div class="input-group">
                <InputNumber @bind-Value="RollerShutter.OpeningSizeHeight" class="form-control" id="openingsizeheight"></InputNumber>
                <div class="input-group-append">
                    <span class="input-group-text">mm</span>
                </div>
            </div>
        </div>
        <div class="form-group">
            <label for="openingsizewidth">Opening Size Width</label>
            <div class="input-group">
                <InputNumber @bind-Value="RollerShutter.OpeningSizeWidth" class="form-control" id="openingsizewidth"></InputNumber>
                <div class="input-group-append">
                    <span class="input-group-text">mm</span>
                </div>
            </div>
        </div>
        <div class="form-group">
            <label for="fixingtype">Fixing Type</label>
            <InputText @bind-Value="RollerShutter.FixingType" class="form-control" id="fixingtype"></InputText>
        </div>
        <div class="form-group">
            <label for="bgsize">B/G Size</label>
            <InputText @bind-Value="RollerShutter.BGSize" class="form-control" id="bgsize"></InputText>
        </div>
        <div class="form-group">
            <label for="fhsize">F/H Size</label>
            <InputText @bind-Value="RollerShutter.FHSize" class="form-control" id="fhsize"></InputText>
        </div>
        <div class="form-group">
            <label for="lathcutsizez">Lath Cut Size</label>
            <div class="input-group">
                <InputNumber @bind-Value="RollerShutter.LathCutSize" class="form-control" id="lathcutsizez"></InputNumber>
                <div class="input-group-append">
                    <span class="input-group-text">mm</span>
                </div>
            </div>
        </div>
        <div class="form-group">
            <label for="operationtype">Operation Type</label>
            <select @onchange="(eventArgs) => { RollerShutter.OperationType = (OperationType)HandleSelectChange<OperationType>(eventArgs); }" class="form-control" id="operationtype">
                <option>Select Operation Type ...</option>
                @foreach (var type in Enum.GetValues(typeof(OperationType)))
                {
                    var isSelected = type.ToString() == RollerShutter.OperationType.ToString();
                    <option value="@type" selected="@isSelected">@EnumHelper.GetDisplayName((OperationType)Enum.Parse(typeof(OperationType), type.ToString()))</option>
                }
            </select>
        </div>
        @if (RollerShutter.OperationType == OperationType.Electric)
        {
            <div class="form-group">
                <label for="supplytype">Supply Type</label>
                <select @onchange="(eventArgs) => { RollerShutter.ElectricOperation.SupplyType = (ElectricalSupplyType)HandleSelectChange<ElectricalSupplyType>(eventArgs); }" class="form-control" id="supplytype">
                    <option>Select Supply Type ...</option>
                    @foreach (var type in Enum.GetValues(typeof(ElectricalSupplyType)))
                    {
                        var isSelected = type.ToString() == RollerShutter.ElectricOperation.SupplyType.ToString();
                        <option value="@type" selected="@isSelected">@EnumHelper.GetDisplayName((ElectricalSupplyType)Enum.Parse(typeof(ElectricalSupplyType), type.ToString()))</option>
                    }
                </select>
            </div>
            <div class="form-group">
                <label for="motortype">Motor Type</label>
                <InputText @bind-Value="RollerShutter.ElectricOperation.MotorType" class="form-control" id="motortype"></InputText>
            </div>
            <div class="form-group">
                <label for="control">Control</label>
                <InputText @bind-Value="RollerShutter.ElectricOperation.Control" class="form-control" id="control"></InputText>
            </div>
            <div class="form-group">
                <label for="safetytype">Electrical Safeties</label>
                
                 @foreach (var type in Enum.GetValues(typeof(ElectricalSafety)))
                 {
                    var isChecked = RollerShutter.ElectricOperation.ElectricalSafety.Where(e => e.ElectricalSafety == (ElectricalSafety)type).Any();
                    <div class="form-check">
                        <input @onchange="(eventArgs) => { HandleSafetyCheck(type); }" type="checkbox" checked="@isChecked" value="@type" class="form-check-input" id="@type" />
                        <label class="form-check-label" for="@type">@EnumHelper.GetDisplayName((ElectricalSafety)Enum.Parse(typeof(ElectricalSafety), type.ToString()))</label>
                    </div>
                 }
                    
                </div>
            @if (IsElectricalSafetyPEC)
            { 
                <div class="form-group">
                    <label for="pecqty">P.E.C Qty</label>
                    <InputNumber @bind-Value="RollerShutter.ElectricOperation.PECQty" class="form-control" id="pecqty"></InputNumber>
                </div>
             }
         }
        <div class="form-group">
            <label for="tubetype">Tube Type and Gauge</label>
            <InputText @bind-Value="RollerShutter.TubeTypeGauge" class="form-control" id="tubetype"></InputText>
        </div>
        <div class="form-group">
            <label for="rollercutsize">Roller Cut Size</label>
            <InputText @bind-Value="RollerShutter.RollerCutSize" class="form-control" id="rollercutsize"></InputText>
        </div>
        <div class="form-group">
            <label for="curtaintype">Curtain Type</label>
            <InputText @bind-Value="RollerShutter.CurtainType" class="form-control" id="curtaintype"></InputText>
        </div>
        <div class="form-group">
            <label for="guidetype">Guide Type</label>
            <InputText @bind-Value="RollerShutter.GuideType" class="form-control" id="guidetype"></InputText>
        </div>
        <div class="form-group">
            <label for="guidecutsize">Guide Cut Size</label>
            <InputText @bind-Value="RollerShutter.GuideCutSize" class="form-control" id="guidecutsize"></InputText>
        </div>
        <div class="form-group">
            <label for="boltonguides">Bolt on Guides</label>
            <InputCheckbox @bind-Value="RollerShutter.IsBoltOnGuides" class="form-control checkbox" id="boltonguides"></InputCheckbox>
        </div>
        <div class="form-group">
            <label for="angletype">Angle Type</label>
            <InputText @bind-Value="RollerShutter.AngleType" class="form-control" id="angletype"></InputText>
        </div>
        <div class="form-group">
            <label for="anglecutsize">Angle Cut Size</label>
            <InputText @bind-Value="RollerShutter.AngleCutSize" class="form-control" id="anglecutsize"></InputText>
        </div>
        <div class="form-group">
            <label for="iscanopy">Canopy</label>
            <input type="checkbox" @onchange="HandleCanopyChange" checked="@RollerShutter.Canopy" class="form-control checkbox" id="iscanopy" />
        </div>
        <div class="@IsVisibleCanopy">
            <div class="form-group">
                <label for="canopytype">Canopy Type</label>
                <InputText @bind-Value="RollerShutter.CanopyType" class="form-control" id="canopytype"></InputText>
            </div>
            <div class="form-group">
                <label for="canopycutsize">Canopy Cut Size</label>
                <InputText @bind-Value="RollerShutter.CanopyCutSize" class="form-control" id="canopycutsize"></InputText>
            </div>
        </div>
        <div class="form-group">
            <label for="isfascia">Fascia</label>
            <input type="checkbox" @onchange="HandleFasciaChange" checked="@RollerShutter.Fascia" class="form-control checkbox" id="isfascia" />
        </div>
        <div class="@IsVisibleFascia">
            <div class="form-group">
                <label for="fasciatype">Fascia Type</label>
                <InputText @bind-Value="RollerShutter.FasciaType" class="form-control" id="fasciatype"></InputText>
            </div>
            <div class="form-group">
                <label for="fasciasize">Fascia Size</label>
                <InputText @bind-Value="RollerShutter.FasciaSize" class="form-control" id="fasciasize"></InputText>
            </div>
        </div>
        <div class="form-group">
            <label for="colour">Colour</label>
            <InputText @bind-Value="RollerShutter.Colour" class="form-control" id="colour"></InputText>
        </div>
        <div class="form-group">
            <label for="wicketeurodoor">Wicket / Euro Door</label>
            <InputCheckbox @bind-Value="RollerShutter.WicketEuroDoor" class="form-control checkbox" id="wicketeurodoor"></InputCheckbox>
        </div>
        <div class="form-group">
            <label for="antifallsafety">Anti-Fall Safety</label>
            <select @onchange="(eventArgs) => { RollerShutter.AntiFallSafety = (AntiFallSafety)HandleSelectChange<AntiFallSafety>(eventArgs); }" class="form-control" id="antifallsafety">
                <option>Select Anti-Fall Safety ...</option>
                @foreach (var type in Enum.GetValues(typeof(AntiFallSafety)))
                {
                    var isSelected = type.ToString() == RollerShutter.AntiFallSafety.ToString();
                    <option value="@type" selected="@isSelected">@EnumHelper.GetDisplayName((AntiFallSafety)Enum.Parse(typeof(AntiFallSafety), type.ToString()))</option>
                }
            </select>
        </div>
        <div class="form-group">
            <label for="firedefence">Fire Defence</label>
            <select @onchange="(eventArgs) => { RollerShutter.FireDefence = (FireDefence)HandleSelectChange<FireDefence>(eventArgs); }" class="form-control" id="firedefence">
                <option>Select Fire Defence ...</option>
                @foreach (var type in Enum.GetValues(typeof(FireDefence)))
                {
                    var isSelected = type.ToString() == RollerShutter.FireDefence.ToString();
                    <option value="@type" selected="@isSelected">@EnumHelper.GetDisplayName((FireDefence)Enum.Parse(typeof(FireDefence), type.ToString()))</option>
                }
            </select>
        </div>
        <div class="form-group">
            <label for="extranotes">Extra Notes</label>
            <InputTextArea @bind-Value="RollerShutter.ExtraNotes" class="form-control" id="extranotes"></InputTextArea>
        </div>
    </fieldset>
    <br />
    <br />
}

@code {
    [Parameter]
    public RollerShutterDoor RollerShutter { get; set; }

    private List<EnumOption> operationTypes { get; set; } = EnumToSelect.PopulateOptions<OperationType>();
    private List<EnumOption> sectorTypes { get; set; } = EnumToSelect.PopulateOptions<SectorType>();
    private List<EnumOption> supplyTypes { get; set; } = EnumToSelect.PopulateOptions<ElectricalSupplyType>();
    private List<EnumOption> safetyTypes { get; set; } = EnumToSelect.PopulateOptions<ElectricalSafety>();
    private List<EnumOption> antiFallSafetyTypes { get; set; } = EnumToSelect.PopulateOptions<AntiFallSafety>();
    private List<EnumOption> fireDefenceTypes { get; set; } = EnumToSelect.PopulateOptions<FireDefence>();

    private Dictionary<string, object> InputAttributes { get; set; } = new Dictionary<string, object>();

    private string IsVisibleCanopy = "d-none";
    private string IsVisibleFascia = "d-none";
    private string IsVisibleSupplierOrderNumber = "d-none";
    private bool IsElectricalSafetyPEC = false;

    protected override void OnInitialized()
    {
        IsVisibleSupplierOrderNumber = RollerShutter.IsSupplied ? "d-block" : "d-none";
        IsVisibleCanopy = RollerShutter.Canopy ? "d-block" : "d-none";
        IsVisibleFascia = RollerShutter.Fascia ? "d-block" : "d-none";

        if (RollerShutter.ElectricOperation.ElectricalSafety.Any(e => e.ElectricalSafety == ElectricalSafety.PEC))
        {
            IsElectricalSafetyPEC = true;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) //&& IsVisible && RollerShutter.OperationType == OperationType.Electric)
        {
            var dotNetReference = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("FifeShuttersLtd.setMultiSelect", dotNetReference);
        }
    }

    public void HandleSuppliedDoorChange(ChangeEventArgs e)
    {
        RollerShutter.IsSupplied = (bool)e.Value;
        IsVisibleSupplierOrderNumber = IsVisibleSupplierOrderNumber == "d-none" ? "d-block" : "d-none";
    }

    public void HandleCanopyChange(ChangeEventArgs e)
    {
        RollerShutter.Canopy = (bool)e.Value;
        IsVisibleCanopy = IsVisibleCanopy == "d-none" ? "d-block" : "d-none";
    }

    public void HandleFasciaChange(ChangeEventArgs e)
    {
        RollerShutter.Fascia = (bool)e.Value;
        IsVisibleFascia = IsVisibleFascia == "d-none" ? "d-block" : "d-none";
    }

    public int HandleSelectChange<TEnum>(ChangeEventArgs e) where TEnum : Enum
    {
        if (Enum.IsDefined(typeof(TEnum), e.Value))
        {
            return (int)Enum.Parse(typeof(TEnum), e.Value.ToString());
        }

        return 0;
    }

    private void HandleSafetyCheck(object e)
    {
        var option = (ElectricalSafety)Enum.Parse(typeof(ElectricalSafety), e.ToString());
        var existingOption = RollerShutter.ElectricOperation.ElectricalSafety.Find(e => e.ElectricalSafety == option);

        if (existingOption == null)
        {
            ElectricalSafetySelection electricalSafetySelection = new ElectricalSafetySelection();
            electricalSafetySelection.ElectricalSafety = option;
            RollerShutter.ElectricOperation.ElectricalSafety.Add(electricalSafetySelection);
        }
        else
        {
            var result = RollerShutter.ElectricOperation.ElectricalSafety.Remove(existingOption);
        }

        if(RollerShutter.ElectricOperation.ElectricalSafety.Any(e => e.ElectricalSafety == ElectricalSafety.PEC))
        {
            IsElectricalSafetyPEC = true;
        }
        else
        {
            IsElectricalSafetyPEC = false;
        }
    }
}

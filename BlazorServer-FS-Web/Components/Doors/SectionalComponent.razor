@inherits DoorBase
@if (IsVisible)
{
    <fieldset disabled="@Sectional.IsDisabled">
        <legend>Sectional Door Detail</legend>
        <div class="form-group">
            <label for="manufacturer">Manufacturer</label>
            <InputText @bind-Value="Sectional.Manufacturer" class="form-control" id="manufacturer"></InputText>
        </div>
        <div class="form-group">
            <label for="issupplied">Supplied Door</label>
            <input type="checkbox" @onchange="HandleSuppliedDoorChange" checked="@Sectional.IsSupplied" class="form-control checkbox" id="issupplied" />
        </div>
        <div class="form-group @IsVisibleSupplierOrderNumber">
            <label for="supplierordernumber">Supplier Order Number</label>
            <InputText @bind-Value="Sectional.SupplierOrderNumber" class="form-control" id="supplierordernumber"></InputText>
        </div>
        <div class="form-group">
            <label for="sectortype">Sector Type</label>
            <select @onchange="(eventArgs) => { Sectional.Sector = (SectorType)HandleSelectChange<SectorType>(eventArgs); }" class="form-control" id="sectortype">
                <option value=" ">Select Sector Type ...</option>
                @foreach (var type in Enum.GetValues(typeof(SectorType)))
                {
                    var isSelected = type.ToString() == Sectional.Sector.ToString();
                    <option value="@type" selected="@isSelected">@EnumHelper.GetDisplayName((SectorType)Enum.Parse(typeof(SectorType), type.ToString()))</option>
                }
            </select>
        </div>
        <div class="form-group">
            <label for="overjambsize">Over Jamb Size</label>
            <div class="input-group">
                <InputNumber @bind-Value="Sectional.OverJambSize" class="form-control" id="overjambsize"></InputNumber>
                <div class="input-group-append">
                    <span class="input-group-text">mm</span>
                </div>
            </div>
        </div>
        <div class="form-group">
            <label for="toptracksize">Top of Track Size</label>
            <div class="input-group">
                <InputNumber @bind-Value="Sectional.TopOfTrackSize" class="form-control" id="toptracksize"></InputNumber>
                <div class="input-group-append">
                    <span class="input-group-text">mm</span>
                </div>
            </div>
        </div>
        <div class="form-group">
            <label for="sizespringassembly">Size to Sprint Assembly</label>
            <div class="input-group">
                <InputNumber @bind-Value="Sectional.SizeToSpringAssembly" class="form-control" id="sizespringassembly"></InputNumber>
                <div class="input-group-append">
                    <span class="input-group-text">mm</span>
                </div>
            </div>
        </div>
        <div class="form-group">
            <label for="paneloecsize">Panel O.E.C Size</label>
            <div class="input-group">
                <InputNumber @bind-Value="Sectional.PanelOECSize" class="form-control" id="paneloecsize"></InputNumber>
                <div class="input-group-append">
                    <span class="input-group-text">mm</span>
                </div>
            </div>
        </div>
        <div class="form-group">
            <label for="lifttype">Lift Type</label>
            <InputText @bind-Value="Sectional.LiftType" class="form-control" id="lifttype"></InputText>
        </div>
        <div class="form-group">
            <label for="cable">Cable</label>
            <div class="input-group">
                <InputNumber @bind-Value="Sectional.Cable" class="form-control" id="cable"></InputNumber>
                <div class="input-group-append">
                    <span class="input-group-text">mm</span>
                </div>
            </div>
        </div>
        <div class="form-group">
            <label for="shaftlength">Shaft Length</label>
            <div class="input-group">
                <InputNumber @bind-Value="Sectional.ShaftLength" class="form-control" id="shaftlength"></InputNumber>
                <div class="input-group-append">
                    <span class="input-group-text">mm</span>
                </div>
            </div>
        </div>
        <div class="form-group">
            <label for="shaftsize">Shaft Size</label>
            <div class="input-group">
                <InputNumber @bind-Value="Sectional.ShaftSize" class="form-control" id="shaftsize"></InputNumber>
                <div class="input-group-append">
                    <span class="input-group-text">mm</span>
                </div>
            </div>
        </div>
        <div class="form-group">
            <label for="numberofsprings">Number of Springs</label>
            <div class="input-group">
                <InputNumber @bind-Value="Sectional.NumberOfSprings" class="form-control" id="numberofsprings"></InputNumber>
            </div>
        </div>
        <div class="form-group">
            <label for="springlength">Spring Length</label>
            <div class="input-group">
                <InputNumber @bind-Value="Sectional.SpringLength" class="form-control" id="springlength"></InputNumber>
                <div class="input-group-append">
                    <span class="input-group-text">mm</span>
                </div>
            </div>
        </div>
        <div class="form-group">
            <label for="springsize">Spring Size</label>
            <div class="input-group">
                <InputNumber @bind-Value="Sectional.SpringSize" class="form-control" id="springsize"></InputNumber>
                <div class="input-group-append">
                    <span class="input-group-text">mm</span>
                </div>
            </div>
        </div>
        <div class="form-group">
            <label for="operationtype">Operation Type</label>
            <select @onchange="(eventArgs) => { Sectional.OperationType = (OperationType)HandleSelectChange<OperationType>(eventArgs); }" class="form-control" id="operationtype">
                <option value=" ">Select Operation Type ...</option>
                @foreach (var type in Enum.GetValues(typeof(OperationType)))
                {
                    <option value="@type">@EnumHelper.GetDisplayName((OperationType)Enum.Parse(typeof(OperationType), type.ToString()))</option>
                }
            </select>
        </div>
        @if (Sectional.OperationType == OperationType.Electric)
        {
            <div class="form-group">
                <label for="supplytype">Supply Type</label>
                <select @onchange="(eventArgs) => { Sectional.ElectricOperation.SupplyType = (ElectricalSupplyType)HandleSelectChange<ElectricalSupplyType>(eventArgs); }" class="form-control" id="supplytype">
                    <option value=" ">Select Supply Type ...</option>
                    @foreach (var type in Enum.GetValues(typeof(ElectricalSupplyType)))
                    {
                        <option value="@type">@EnumHelper.GetDisplayName((ElectricalSupplyType)Enum.Parse(typeof(ElectricalSupplyType), type.ToString()))</option>
                    }
                </select>
            </div>
            <div class="form-group">
                <label for="motortype">Motor Type</label>
                <InputText @bind-Value="Sectional.ElectricOperation.MotorType" class="form-control" id="motortype"></InputText>
            </div>
            <div class="form-group">
                <label for="control">Control</label>
                <InputText @bind-Value="Sectional.ElectricOperation.Control" class="form-control" id="control"></InputText>
            </div>
            <div class="form-group">
                <label for="supplytype">Electrical Safeties</label>
                <select @onchange="(eventArgs) => { Sectional.ElectricOperation.ElectricalSafety = (ElectricalSafety)HandleSelectChange<ElectricalSafety>(eventArgs); }" class="form-control" id="supplytype">
                    <option value=" ">Select Electrical Safeties ...</option>
                    @foreach (var type in Enum.GetValues(typeof(ElectricalSafety)))
                    {
                        <option value="@type">@EnumHelper.GetDisplayName((ElectricalSafety)Enum.Parse(typeof(ElectricalSafety), type.ToString()))</option>
                    }
                </select>
            </div>
            @if (Sectional.ElectricOperation.ElectricalSafety == ElectricalSafety.PEC)
            {
                <div class="form-group">
                    <label for="pecqty">P.E.C Qty</label>
                    <InputNumber @bind-Value="Sectional.ElectricOperation.PECQty" class="form-control" id="pecqty"></InputNumber>
                </div>
            }
        }
        <div class="form-group">
            <label for="colour">Colour</label>
            <InputText @bind-Value="Sectional.Colour" class="form-control" id="colour"></InputText>
        </div>
        <div class="form-group">
            <label for="wicketeurodoor">Wicket / Euro Door</label>
            <InputCheckbox @bind-Value="Sectional.WicketEuroDoor" class="form-control checkbox" id="wicketeurodoor"></InputCheckbox>
        </div>
        <div class="form-group">
            <label for="antifallsafety">Anti-Fall Safety</label>
            <select @onchange="(eventArgs) => { Sectional.AntiFallSafety = (AntiFallSafety)HandleSelectChange<AntiFallSafety>(eventArgs); }" class="form-control" id="antifallsafety">
                <option value=" ">Select Anti-Fall Safety ...</option>
                @foreach (var type in Enum.GetValues(typeof(AntiFallSafety)))
                {
                    <option value="@type">@EnumHelper.GetDisplayName((AntiFallSafety)Enum.Parse(typeof(AntiFallSafety), type.ToString()))</option>
                }
            </select>
        </div>
        <div class="form-group">
            <label for="extranotes">Extra Notes</label>
            <InputTextArea @bind-Value="Sectional.ExtraNotes" class="form-control" id="extranotes"></InputTextArea>
        </div>
    </fieldset>
}

@code {

    [Parameter]
    public SectionalDoor Sectional { get; set; }

    private string IsVisibleSupplierOrderNumber = "d-none";

    public int HandleSelectChange<TEnum>(ChangeEventArgs e) where TEnum : Enum
    {
        if (Enum.IsDefined(typeof(TEnum), e.Value))
        {
            return (int)Enum.Parse(typeof(TEnum), e.Value.ToString());
        }

        return 0;
    }

    public void HandleSuppliedDoorChange(ChangeEventArgs e)
    {
    IsVisibleSupplierOrderNumber = IsVisibleSupplierOrderNumber == "d-none" ? "d-block" : "d-none";
    }
}

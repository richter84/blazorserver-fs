@page "/Customer/Add"
@inject ICustomerService CustomerService
@inject INewInstallService<NewInstall> NewInstallService

<h1>Customer</h1>

<EditForm Model=@Customer OnValidSubmit="@HandleValidAddorUpdateCustomer">
    <DataAnnotationsValidator />
    <fieldset class="col-md-6">
        <legend>Details</legend>
        <div class="form-group">
            <label for="Name">Name</label>
            <InputText @bind-Value=Customer.Name class="form-control" id="Name" />
            <ValidationMessage For="() => Customer.Name"></ValidationMessage>
        </div>
        <div class="form-group">
            <label for="EmailAddress">Email Address</label>
            <InputText @bind-Value=Customer.EmailAddress class="form-control" id="EmailAddress" />
            <ValidationMessage For="() => Customer.EmailAddress"></ValidationMessage>
        </div>
        <div class="form-group">
            <label for="PhoneNumber">Phone Number</label>
            <InputText @bind-Value=Customer.PhoneNumber class="form-control" id="PhoneNumber" />
            <ValidationMessage For="() => Customer.PhoneNumber"></ValidationMessage>
        </div>
    </fieldset>
    <hr />
    <fieldset class="col-md-6">
        <legend>Addresses</legend>
        <div class="form-group">
            <AddAddress Address="@Address" OnAdd="AddAddresses"></AddAddress>

            @if (Customer.Address.Any())
            {
                <div class="existingaddress-container">
                    <h3>Existing Addresses</h3>
                    @foreach (var address in Customer.Address)
                    {
                        <ExistingAddress Address="@address" OnDelete="DeleteAddress"></ExistingAddress>
                    }
                </div>
            }
            else
            {
                <br />
                <p>No existing addresses</p>
            }

        </div>
    </fieldset>
    <ValidationSummary />
    <hr />
    <br />
    @if (CustomerId.HasValue)
    {
        <fieldset class="col-md-6">
            <legend>Jobs</legend>
            <div class="form-group">
                @if (NewInstalls.Any())
                {
                    <div class="existingaddress-container">
                        <table class="table">
                            <thead class="thead-light">
                                <tr scope="col">Existing New Installs</tr>
                            </thead>
                            <tbody>
                                @foreach (var newInstall in NewInstalls)
                                {
                                    <tr>
                                        <th scope="row">
                                            <a href="/Customer/@CustomerId/NewInstall/@newInstall.Id">Serial Number - @newInstall.SerialNumber</a>
                                        </th>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
                else
                {
                    <br />
                    <p>No existing jobs</p>
                }
            </div>
            <div class="form-group">
                <a href="Customer/@CustomerId/NewInstall" class="btn btn-secondary">Add New Install</a>
                <a href="Customer/@CustomerId/Servicing" class="btn btn-secondary">Add Servicing</a>
                <a href="Customer/@CustomerId/Repair" class="btn btn-secondary">Add Repair</a>
            </div>
        </fieldset>
        <br /><br />
    }

    <input type="submit" class="btn btn-primary" value="Save" />
    <br /><br />
</EditForm>

@code {

    [Parameter]
    public int? CustomerId { get; set; }

    public Customer Customer { get; set; } = new Customer() { Address = new List<Address>() };

    public Address Address { get; set; } = new Address();

    public List<NewInstall> NewInstalls { get; set; } = new List<NewInstall>();

    protected override async Task OnInitializedAsync()
    {
        if (CustomerId.HasValue)
        {
            Customer = await CustomerService.GetCustomer(CustomerId.Value);
            NewInstalls = await NewInstallService.GetNewInstalls(CustomerId.Value);
        }
    }

    void AddAddresses(Address address)
    {
        Customer.Address.Add(address);
        Address = new Address();
    }

    void DeleteAddress(Address address)
    {
        Customer.Address.Remove(address);
        Address = new Address();
    }

    async Task HandleValidAddorUpdateCustomer(EditContext editContext)
    {
        await CustomerService.AddorUpdate((Customer)editContext.Model);
    }
}

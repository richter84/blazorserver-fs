@inject IInvoiceService InvoiceService
@inject IWebHostEnvironment WebHostEnvironment

<EditForm Model=@Invoice OnValidSubmit="@HandleValidAddInvoice">
    <DataAnnotationsValidator />
    <fieldset class="col-md-6">
        Create Invoice
    </fieldset>

    <AddInvoiceItemComponent OnAdd="@HandleAddInvoiceItem"></AddInvoiceItemComponent>


        @foreach (InvoiceItem invoiceItem in Invoice.InvoiceItems)
        {
            <ExistingInvoiceItemComponent InvoiceItem="@invoiceItem" OnDelete="@HandleDeleteInvoiceItem"></ExistingInvoiceItemComponent>
        }
        <div class="d-flex flex-row invoice-totals">
            <div class="p-2 col-sm-8">
                <label>Sub total</label><br />
                <label>Vat total</label><br />
                <label><strong>TOTAL</strong></label>
            </div>
            <div class="p-2 col-sm-2">
                <label>£@Invoice.SubTotal</label><br />
                <label>£@Invoice.VatTotal</label><br />
                <label>£@Invoice.Total</label>
            </div>
            <div class="p-2 col-sm-2">

            </div>
        </div>
        <div>
            <br />
            <button class="btn btn-primary" @onclick="UpdateBusy">Add Invoice</button>

            @if (isBusy)
            {
                <div class="updating alert-warning">
                    <span>Creating Invoice File...</span>
                </div>
            }

        </div>
        <ValidationSummary />

</EditForm>

@code {

    [Parameter]
    public NewInstall NewInstall { get; set; }

    [Parameter]
    public EventCallback<Invoice> OnAddInvoice { get; set; }

    public Invoice Invoice { get; set; } = new Invoice();

    private bool isBusy = false;

    private void UpdateBusy()
    {
        isBusy = true;
    }

    void HandleAddInvoiceItem(InvoiceItem invoiceItem)
    {
        invoiceItem.Price = Math.Round(invoiceItem.Price, 2);
        Invoice.InvoiceItems.Add(invoiceItem);
        CalculateTotals();
    }

    void HandleDeleteInvoiceItem(InvoiceItem invoiceItem)
    {
        Invoice.InvoiceItems.Remove(invoiceItem);
        CalculateTotals();
    }

    async Task HandleValidAddInvoice(EditContext editContext)
    {
        Invoice = (Invoice)editContext.Model;

        try
        {
            var filename = await CreateInvoiceInAzureStorage(Invoice);
            Invoice.FileName = filename;
            Invoice.JobId = NewInstall.Id;
            Invoice.SerialNumber = NewInstall.SerialNumber;
            await InvoiceService.Add(Invoice);
        }
        catch (Exception)
        {
            throw;
        }
        finally
        {
            isBusy = false;
            Invoice = new Invoice();
            await OnAddInvoice.InvokeAsync(Invoice);
        }
    }

    void CalculateTotals()
    {
        Invoice.SubTotal = Math.Round((Invoice.InvoiceItems.Sum(item => item.Price)), 2);
        Invoice.VatTotal = Math.Round((Invoice.SubTotal / 100) * 20, 2);
    }

    private async Task<string> CreateInvoiceInAzureStorage(Invoice invoice)
    {
        string filename = $"{ Guid.NewGuid() }.pdf";
        string html = InvoiceService.PrepareInvoiceHtmlToPdf(invoice, NewInstall.Customer, WebHostEnvironment.WebRootPath);
        await InvoiceService.UploadToAzureStorageAsync(html, filename, NewInstall.Customer.Id, NewInstall.Id);
        return filename;
    }
}
